```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>", 
  warning = F,
  message = F
)
```

```{r, include = FALSE}
library(regress3d)
library(plotly)
library(stargazer)
la_counties <- subset(county_data, state_abbrv == "LA")
model1 <- lm(prcnt_GOP16 ~ median_income16_1k,  data = la_counties)
model2 <- lm(prcnt_GOP16 ~ median_income16_1k + prcnt_black, data = la_counties)
model3 <- lm(prcnt_black ~ median_income16_1k, data = la_counties)

```

# Visualizing the Nested Model Inside the Full Model

## Visualizing Model 1: The nested model with one x variable

For reference, the equation for the nested model is:

\begin{align}
y =& \beta_1 x_1 + \beta_0 +\epsilon. \label{ypredbyx1}
\end{align}

The standard way to visualize Model \ref{ypredbyx1} is in 2 dimensions using a scatterplot with a regression line.

```{r}
la_counties %>%
  ggplot(aes(x = median_income16_1k, y = prcnt_GOP16)) +
  geom_point()+
  geom_smooth(method = lm)+
  theme_classic()+
  labs(y = "% of County that Voted for Trump in 2016",
       x = "County median income")
```
## Visualizing Model 2: The model with two x variables

For reference, the equation for the full model is:

\begin{align}
y =& \beta'_1 x_1 +\beta'_2 x_2 + \beta'_0 +\epsilon' \label{ypredbyx1x2}
\end{align}

Before we see the nested model (Model \ref{ypredbyx1}) in 3D, we can examine the regression surface for Model \ref{ypredbyx1x2} visualized the 3D. The marginal effects of `median_income16_1k` and `prcnt_black` are depicted for reference. 

A more thorough explanation of the code used to create the regression surface and marginal effects, as well as more instructions on how to interact with the 3D graphic can be found [here](https://ellafostermolina.github.io/regress3d/articles/linear_models_3d.html).

```{r}
plot_ly( data = la_counties,
         x = ~median_income16_1k,
         y = ~prcnt_black,
         z = ~prcnt_GOP16) %>%
  add_markers(size = ~pop_estimate16, color = I("black"),
              name ="Louisiana county") %>%
  add_3d_surface(model = model2)%>%
  add_marginals(model = model2, 
                x1_direction_name ="Marginal effect of income",
                x2_direction_name ="Marginal effect of education")
```

Click-hold-drag the image above to rotate it and see the regression surface from different perspectives.

## Visualizing Model 1 Nested Inside Model 2

The nested model can be shown within the regression surface generated by Model \ref{ypredbyx1x2}. This section will demonstrate how to do this. The next section will demonstrate that the predicted $y$ values in the nested model are indeed identical to the predicted values in the regression surface in the direction defined by Model \ref{x1predbyx2}.

\begin{align}
  x_2 =& \gamma_{1} x_1 + \gamma_{0} +\epsilon_{\gamma} \label{x1predbyx2}
\end{align}

### Create predicted values data

In order to visualize Model 1 nested inside the regression surface of Model 2, we will create a dataset of generated and predicted values. This will be used to plot the estimated values of `prcnt_GOP16` in the 3D graphic.

* `income_seq` is a sequence of values from the lowest value for `median_income16_1k` to the highest.
```{r}
income_seq <-  seq(min(la_counties$median_income16_1k, na.rm=TRUE),
                   max(la_counties$median_income16_1k, na.rm=TRUE),
                   length.out=10) 
income_seq <- data.frame(median_income16_1k =income_seq)
```
* `predicted_gop` is a dataframe that contains predicted values for `prcnt_GOP16` based on Model \ref{ypredbyx1} and the values in `income_seq`. Note that there is no explicit information about `prcnt_black` in the prediction.
* `predicted_gop` also contains the lower and upper 95\% confidence intervals for the predicted values.
```{r}
predicted_gop <- predict(object = model1, newdata = income_seq, 
                         interval = "confidence") %>%
  as.data.frame(.)
```
* `predicted_prcnt_black` is a sequence of predicted values for `prcnt_black` based on Model \ref{x1predbyx2} and the values in `income_seq`.
```{r}
predicted_prcnt_black <- predict(object = model3, newdata = income_seq)
```

We then turn these values into a dataframe that __regress_3d__ can use to create lines in 3D.

```{r}
simulated_data_nested_model <- data.frame(median_income16_1k = income_seq,
                                          prcnt_black = predicted_prcnt_black,
                                          prcnt_GOP16 = predicted_gop$fit,
                                          lowerCI = predicted_gop$lwr,
                                          upperCI = predicted_gop$upr)
```

### Create 3D visual

```{r}
plot_ly( data = la_counties,
         x = ~median_income16_1k,
         y = ~prcnt_black,
         z = ~prcnt_GOP16) %>%
  add_markers(size = ~pop_estimate16, color = I("black"),
              name = "Louisiana counties") %>%
  add_3d_surface(model = model2)%>%
  # add_marginals(model = model2, 
  #               x1_direction_name ="Marginal effect of income",
  #               x2_direction_name ="Marginal effect of education")%>%
  add_direction(model = model2, direction_data = simulated_data_nested_model,
                direction_name = "Nested model: prcnt_GOP16 ~ median_income16_1k,<br> omitting prcnt_black")
```

### Takeaways

* The line of predicted values for `prcnt_GOP16` appear to lie exactly on the regression plane generated by Model \ref{ypredbyx1x2} in blue. *This occurs despite the fact that education was not used to generate the estimates for the predicted values of `prcnt_GOP16`.* 
  * The confidence intervals for `prcnt_GOP16` lie outside the confidence intervals for the regression plane generated by Model \ref{ypredbyx1x2}. 

The next section will demonstrate that the predicted values of `prcnt_GOP16` are precisely on the regression plane generated by Model \ref{ypredbyx1x2}. We will generate the predicted values for `prcnt_GOP16` from Model \ref{ypredbyx1x2} using the paired values ($x_1$, $x_2$) = (`median_income16_1k`, `prcnt_black`), where the value for $x_2$ is predicted by Model \ref{x1predbyx2}, `prcnt_black` ~ `median_income16_1k`.

The section on residuals will demonstrate how to extract the standard errors used to create the confidence intervals in Model \ref{ypredbyx1x2} for the direction in the nested model.

## Visualizing A Direction in Model 1 with the Same Predicted Values as the Nested Model 

### Create predicted values data

The previous section predicted values for `prcnt_GOP16` using Model \ref{ypredbyx1}, a model that includes `median_income_1k` but has no information about `prcnt_black`. This section will predict values for `prcnt_GOP16` using Model \ref{ypredbyx1x2}, a model that includes both `median_income_1k` and `prcnt_black`. 

* As in the prior section, `income_seq` is a sequence of values from the lowest value for `median_income16_1k` to the highest.
* `predicted_prcnt_black` is the same as the prior section, a sequence of predicted values for `prcnt_black` based on Model \ref{x1predbyx2} and the values in `income_seq`. We bind these values into a dataframe to be used to generate `predicted_rshift`.
```{r}
income_edu_data <- data.frame(median_income16_1k = income_seq,
                              prcnt_black = predicted_prcnt_black)
```
* `predicted_rshift` is a dataframe that contains predicted values for `prcnt_GOP16` based on Model \ref{ypredbyx1x2} and the values in `income_edu_data`. It also contains the lower and upper 95\% confidence intervals for the predicted values.
```{r}
predicted_rshift <- predict(object = model2, newdata = income_edu_data, interval = "confidence") %>%
  as.data.frame(.)
```

We then turn these values into a dataframe that __regress_3d__ can use to create lines in 3D.

```{r}
simulated_data_model2 <- data.frame(median_income16_1k = income_seq,
                                    prcnt_black = predicted_prcnt_black,
                                    prcnt_GOP16 = predicted_rshift$fit,
                                    lowerCI = predicted_rshift$lwr,
                                    upperCI = predicted_rshift$upr)
```


### Create 3D visual

```{r}
plot_ly( data = la_counties,
         x = ~median_income16_1k,
         y = ~prcnt_black,
         z = ~prcnt_GOP16) %>%
  add_markers(size = ~pop_estimate16, color = I("black"),
              name = "Louisiana counties") %>%
  # add_3d_surface(model = model2)%>%
  # add_marginals(model = model2, 
  #               x1_direction_name ="Marginal effect of income",
  #               x2_direction_name ="Marginal effect of education")%>%
  add_direction(model = model2, direction_data = simulated_data_nested_model,
                direction_name = "Nested model: prcnt_GOP16 ~ median_income16_1k,<br> omitting prcnt_black") %>%
  add_direction(model = model2, direction_data = simulated_data_model2,
                linecolor = "green",
                direction_name = "A direction in Model 2:<br>prcnt_GOP16 ~ median_income16_1k + prcnt_black")
```

### Takeaways

* These two lines look identical:
  *   The [green]{style="color: green;"} line of predicted values for `prcnt_GOP16` based on Model \ref{ypredbyx1x2} in the *direction* of the best fit line for Model \ref{x1predbyx2}: `prcnt_black` ~ `median_income16_1k`
*   The [black]{style="color: black;"} line of predicted values for `prcnt_GOP16` based on Model \ref{ypredbyx1}, which does not have any information about `prcnt_black`.

The table below shows that they are identical to a numeric error. Specifically, they are identical within 13 significant digits, which is within the precision that R can estimate values.

```{r}
diff_model1_model2 <- simulated_data_nested_model$prcnt_GOP16 - simulated_data_model2$prcnt_GOP16
data.frame(model1_rshift =  simulated_data_nested_model$prcnt_GOP16,
           model2_rshift =  simulated_data_model2$prcnt_GOP16, 
           diff = round(diff_model1_model2, digits = 13) )
```

The models with the full regression surface is plotted below.

```{r}
plot_ly( data = la_counties,
         x = ~median_income16_1k,
         y = ~prcnt_black,
         z = ~prcnt_GOP16) %>%
  add_markers(size = ~pop_estimate16, color = I("black"),
              name = "Louisiana counties") %>%
  add_3d_surface(model = model2)%>%
  # add_marginals(model = model2, 
  #               x1_direction_name ="Marginal effect of income",
  #               x2_direction_name ="Marginal effect of education")%>%
  add_direction(model = model2, direction_data = simulated_data_nested_model,
                direction_name = "Nested model: prcnt_GOP16 ~ median_income16_1k,<br> omitting prcnt_black") %>%
  add_direction(model = model2, direction_data = simulated_data_model2,
                linecolor = "green",
                direction_name = "A direction in Model 2:<br>prcnt_GOP16 ~ median_income16_1k + prcnt_black")
```
